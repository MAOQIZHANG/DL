# -*- coding: utf-8 -*-
"""predict_22nd_frame.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10b0-8bKt59rBFU0fs80QoQflF33Mzxi_
"""

import os
from PIL import Image
import torchvision.transforms as transforms
import torch

if __name__ == "__main__":
  
  print('begin')
  
  # Load the trained model
  model_path = "/scratch/mz3550/model_output/best_conv_lstm_model_500_100.pth"
  model.load_state_dict(torch.load(model_path))
  model.eval()

  # Function to generate the 22nd frame
  def generate_22nd_frame(model, input_frames):
      input_frames = input_frames.unsqueeze(0).to(device)
      for _ in range(11):
          output = model(input_frames)
          input_frames = torch.cat((input_frames[:, 1:], output.unsqueeze(1)), dim=1)
      return output

  # Process the hidden set
  hidden_dir = "/scratch/mz3550/hidden/"

  # Create a folder to save the predicted 22nd frames
  output_folder = "/home/mz3550/predicted_22nd_frames"
  os.makedirs(output_folder, exist_ok=True)

  for folder in os.listdir(hidden_dir):
      video_folder_path = os.path.join(hidden_dir, folder)
      
      input_frames = []
      for i in range(11):
          image_path = os.path.join(video_folder_path, f"image_{i}.png")
          image = Image.open(image_path).convert("RGB")
          image = transforms.ToTensor()(image)
          input_frames.append(image)
      
      input_frames = torch.stack(input_frames)
      
      # Generate the 22nd frame using the model
      with torch.no_grad():
          predicted_22nd_frame = generate_22nd_frame(model, input_frames)
      
      # Save the predicted 22nd frame
      output_filename = os.path.join(output_folder, f"22nd_frame_{folder}.pt")
      torch.save(predicted_22nd_frame.cpu(), output_filename)
  print('finish')